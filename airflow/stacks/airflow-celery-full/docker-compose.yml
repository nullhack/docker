version: '3.6'
services:
  postgres:
    environment:
      - PGDATA=/var/lib/postgresql/data
      - POSTGRES_DB=${POSTGRES__AIRFLOW__DB:?POSTGRES__AIRFLOW__DB}
      - POSTGRES_HOST=${POSTGRES__AIRFLOW__HOST:?POSTGRES__AIRFLOW__HOST}
      - POSTGRES_PASSWORD=${POSTGRES__AIRFLOW__PASSWORD:?POSTGRES__AIRFLOW__PASSWORD}
      - POSTGRES_PORT=${POSTGRES__AIRFLOW__PORT:?POSTGRES__AIRFLOW__PORT}
      - POSTGRES_USER=${POSTGRES__AIRFLOW__USER:?POSTGRES__AIRFLOW__USER}
    image: postgres:11
    networks:
      - default
    restart: unless-stopped
    volumes:
      - airflow-pgdata:/var/lib/postgresql/data

  redis:
    command: redis-server --requirepass ${REDIS__AIRFLOW__PASSWORD:?REDIS__AIRFLOW__PASSWORD}
    image: redis:5
    networks:
      - default
    restart: unless-stopped

  webserver:
    build: ../../src
    depends_on:
      - postgres
      - redis
    entrypoint: ./entrypoint.sh airflow webserver
    environment:
      - AIRFLOW_PASSWORD=${AIRFLOW__MAIN__PASSWORD:?AIRFLOW__MAIN__PASSWORD}
      - AIRFLOW_USER=${AIRFLOW__MAIN__USER:?AIRFLOW__MAIN__USER}
      - AIRFLOW__CELERY__BROKER_URL=${AIRFLOW__CELERY__BROKER_URL:?AIRFLOW__CELERY__BROKER_URL}
      - AIRFLOW__CELERY__RESULT_BACKEND=${AIRFLOW__CELERY__RESULT_BACKEND:?AIRFLOW__CELERY__RESULT_BACKEND}
      - AIRFLOW__CORE__DAGS_FOLDER=/dags
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY:?AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=true
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=${AIRFLOW__CORE__SQL_ALCHEMY_CONN:?AIRFLOW__CORE__SQL_ALCHEMY_CONN}
      - AIRFLOW__WEBSERVER__AUTH_BACKEND=airflow.contrib.auth.backends.password_auth
      - AIRFLOW__WEBSERVER__AUTHENTICATE=true
      - AIRFLOW__WEBSERVER__BASE_URL=http://0.0.0.0:8080
      - AIRFLOW__WEBSERVER__WEB_SERVER_PORT=8080
    healthcheck:
      test: curl -sfk http://0.0.0.0:8080/health | grep healthy
      interval: 60s
      timeout: 60s
      retries: 3
    image: airflow:1.10.4
    labels:
      - traefik.enable=true
      - traefik.frontend.auth.basic=${AIRFLOW__TRAEFIK__AUTH:?AIRFLOW__TRAEFIK__AUTH}
      - traefik.frontend.rule=Host:${AIRFLOW__TRAEFIK__URL:?AIRFLOW__TRAEFIK__URL}
      - traefik.port=8080
    networks:
      - default
    ports:
      - 8080:8080
    restart: unless-stopped
    volumes:
      - ../../dags:/dags
      - airflow-conf:/root/airflow

  worker:
    build: ../../src
    depends_on:
      - webserver
      - postgres
      - redis
    entrypoint: ./entrypoint.sh airflow worker
    image: airflow:1.10.4
    restart: unless-stopped
    volumes:
      - ../../dags:/dags
      - airflow-conf:/root/airflow

  scheduler:
    depends_on:
      - webserver
      - postgres
      - redis
    entrypoint: ./entrypoint.sh airflow scheduler
    image: airflow:1.10.4
    restart: unless-stopped
    volumes:
      - ../../dags:/dags
      - airflow-conf:/root/airflow

  flower:
    depends_on:
      - webserver
      - postgres
      - redis
    entrypoint: ./entrypoint.sh airflow flower
    image: airflow:1.10.4
    ports:
      - 5555:5555
    restart: unless-stopped
    volumes:
      - airflow-conf:/root/airflow

volumes:
  airflow-pgdata:
  airflow-conf:
